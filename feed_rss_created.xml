<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>wh1t3p1g&#39;s blog</title><description>happy hunting bugs &lt;feedId:69986037923968000+userId:56297007026754560&gt;</description><link>https://blog.0kami.cn/</link><atom:link href="https://blog.0kami.cn/feed_rss_created.xml" rel="self" type="application/rss+xml" /><managingEditor>wh1t3p1g</managingEditor><docs>https://github.com/wh1t3p1g</docs><language>zh</language> <pubDate>Mon, 03 Mar 2025 11:02:00 -0000</pubDate> <lastBuildDate>Mon, 03 Mar 2025 11:02:00 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.17.1</generator> <image> <url>None</url> <title>wh1t3p1g's blog</title><link>https://blog.0kami.cn/</link> </image> <item> <title>Home</title> <description>&lt;h6&gt;index.md:1-23/name { #index.md:1-23/slug }&lt;/h6&gt;</description><link>https://blog.0kami.cn/</link> <pubDate>Mon, 03 Mar 2025 11:01:21 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/</guid> </item> <item> <title>About Me</title> <description>&lt;h1&gt;About Me&lt;/h1&gt;&lt;p&gt;A program analysis enthusiasts 😄&lt;/p&gt;&lt;p&gt;A researcher on java code review (semi-auto and manual) and redteam 🤔&lt;/p&gt;&lt;p&gt;A former ctfer at NeSE 🍵&lt;/p&gt;&lt;p&gt;And currently ...&lt;/p&gt;</description><link>https://blog.0kami.cn/about/</link> <pubDate>Mon, 03 Mar 2025 11:01:21 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/about/</guid> </item> <item> <title>Thymeleaf ssti 3.1.2 黑名单绕过</title> <description>&lt;h2&gt;0x01 前言&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;thymeleaf 模版对于 SpEL 表达式的解析具有黑名单上的类型检查（最早追溯到什么时间暂时没找到）&lt;/li&gt;&lt;li&gt;在 2023.07 thymeleaf 出了个沙箱绕过的漏洞 CVE-2023-38286，影响版本是 3.1.1.RELEASE。这个沙盒绕过可以追溯到 [spring a...&lt;/li&gt;&lt;/ul&gt;</description><link>https://blog.0kami.cn/blog/2024/thymeleaf%20ssti%203.1.2%20%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/</link> <pubDate>Mon, 03 Mar 2025 11:01:21 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2024/thymeleaf%20ssti%203.1.2%20%E9%BB%91%E5%90%8D%E5%8D%95%E7%BB%95%E8%BF%87/</guid> </item> <item> <title>【tabby 案例随笔】XML-RPC RCE CVE-2023-49070</title> <description>&lt;h3&gt;#1 前言&lt;/h3&gt;&lt;p&gt;这几天，ofbiz 出了一个认证绕过导致的 xml-rpc 反序列化漏洞。在复现过程中，发现用 tabby 跑实际的漏洞链路会非常长，导致无法在个人电脑上完成利用链的检索。&lt;/p&gt;&lt;p&gt;本文将讨论 tabby 的另一种规则扩展方法，使得在个人机器上遇到函数调用链路过深的情况也可以查询出对应的漏洞链路。...&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2023/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91XML-RPC%20RCE%20CVE-2023-49070/</link> <pubDate>Wed, 06 Dec 2023 22:26:16 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2023/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91XML-RPC%20RCE%20CVE-2023-49070/</guid> </item> <item> <title>【tabby 案例随笔】sysaid CVE-2023-47246</title> <description>&lt;h3&gt;前言&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;最近开始运营 tabby 的相关规则库，后续会有一些类似的使用 tabby 分析漏洞的随笔。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 11 月初，微软安全团队披露了 Lace Tempest 黑客团队利用 SysAid 软件的 0day 漏洞 (CVE-2023-47246)进行勒索软件分发的安全事件。后续，github 上也出...&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2023/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91sysaid%20CVE-2023-47246/</link> <pubDate>Tue, 05 Dec 2023 22:26:16 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2023/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91sysaid%20CVE-2023-47246/</guid> </item> <item> <title>基于代码属性图的自动化漏洞挖掘实践</title> <description>&lt;h2&gt;#0 前言&lt;/h2&gt;&lt;p&gt;应用程序分析技术挖掘应用漏洞一直以来都是学术界和工业界的研究重点之一。从最初的正则匹配到最近的代码属性图挖掘方案，国内外有很多来自不同阶段的安全工具或商业产品来发掘程序代码的安全问题。在 Java 语言方面，业界已经有了不少出色的产品，如 CodeQL 等，但是，多数产品考虑的角度是从甲方视角或...&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2023/%E5%9F%BA%E4%BA%8E%E4%BB%A3%E7%A0%81%E5%B1%9E%E6%80%A7%E5%9B%BE%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5/</link> <pubDate>Wed, 11 Jan 2023 22:43:16 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2023/%E5%9F%BA%E4%BA%8E%E4%BB%A3%E7%A0%81%E5%B1%9E%E6%80%A7%E5%9B%BE%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AE%9E%E8%B7%B5/</guid> </item> <item> <title>如何高效的挖掘Java反序列化利用链？</title> <description>&lt;h2&gt;#1 前言&lt;/h2&gt;&lt;p&gt;Java反序列化利用链一直都是国内外研究热点之一，但当前自动化方案gadgetinspector的效果并不好。所以目前多数师傅仍然是以人工+自研小工具的方式进行利用链的挖掘。目前我个人也在找一个合适的方法来高效挖掘利用链，本文将主要介绍我自己的一些挖掘心得，辅以XStream反序列化利用链CVE-2021-21346为例。&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2021/how_to_find_gadget_chains/</link> <pubDate>Sun, 14 Mar 2021 22:43:16 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2021/how_to_find_gadget_chains/</guid> </item> <item> <title>如何高效地捡漏反序列化利用链？</title> <description>&lt;h2&gt;#1 前言&lt;/h2&gt;&lt;p&gt;之前在文章 &lt;a href=&#34;https://blog.0kami.cn/2021/03/14/java-how-to-find-gadget-chains/&#34;&gt;如何高效地挖掘 Java 反序列化利用链&lt;/a&gt; 中提到了我是如何高效挖掘利用链的，这其中提到了工具 &lt;a href=&#34;https://github.com/wh1t3p1g/tabby&#34;&gt;tabby&lt;/a&gt; 。&lt;/p&gt;&lt;p&gt;目前，tabby 开源也有一段时间了，这段时间里有不少小伙伴问我如何在实际环境中更好地使用它？&lt;/p&gt;&lt;p&gt;为此，本文将介绍我是如何利用 tabby 捡漏 XStream &lt;a href=&#34;https://x-stream.github.io/CVE-2021-39147.html&#34;&gt;CVE-2021-39147&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&#34;https://x-stream.github.io/CVE-2021-39148.html&#34;&gt;CVE-2021-39148&lt;/a&gt; 。&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2021/how_to_find_gadget_chains_2/</link> <pubDate>Sun, 14 Mar 2021 22:43:16 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2021/how_to_find_gadget_chains_2/</guid> </item> <item> <title>XStream 1.4.15 Blacklist Bypass</title> <description>&lt;h2&gt;#1 Gadget Overview&lt;/h2&gt;&lt;p&gt;Recently, I found a new deserialzation gadget which can bypass the latest version of XStream. This gadget use the JDK to construct the gadget chain. I had tested the gadget chain to RCE (remote code execute) with the version of JDK8 (8u162). I think other version of JDK also could trigger this vulnerablity to the RCE.&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2021/xstream_blacklist_bypass/</link> <pubDate>Sun, 03 Jan 2021 22:43:16 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2021/xstream_blacklist_bypass/</guid> </item> <item> <title>xnuca2020 easyjava设计思路</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;easyjava的设计思路主要来源于现实环境中遇到的一些问题，以及最近刚出的mybatis二级缓存反序列化的安全问题的一种设想。题目的设计目的主要考察选手对于实操性的漏洞的利用以及源码审计能力。&lt;/p&gt;</description><link>https://blog.0kami.cn/writeups/2020/xnuca-2020-easyjava/</link> <pubDate>Mon, 02 Nov 2020 12:04:34 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/writeups/2020/xnuca-2020-easyjava/</guid> </item> <item> <title>struts2历史漏洞分析</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;17年的时候整理过struts2相关的POC，时隔3年，虽然struts2已经不再那么流行了，但是还是有很大的研究价值，本文将一点一点跟一下struts2 有价值的漏洞XD&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2020/talk_about_struts2/</link> <pubDate>Fri, 22 May 2020 17:14:38 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2020/talk_about_struts2/</guid> </item> <item> <title>回顾XStream反序列化漏洞</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://x-stream.github.io/&#34;&gt;XStream&lt;/a&gt;也是一款用的比较多的序列化组件，可以将object转化为XML并能完整的还原回来。他也曾经出现过反序列化漏洞，本文主要整理XStream相关的安全问题XD&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2020/talk-about-xstream-deserialization-20200418/</link> <pubDate>Sat, 18 Apr 2020 19:44:58 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2020/talk-about-xstream-deserialization-20200418/</guid> </item> <item> <title>浅谈fastjson反序列化漏洞</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近又碰上了fastjson的题目，想着是时候分析一波这个漏洞了，跟上师傅们的脚步。&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2020/talk-about-fastjson-deserialization-20200413/</link> <pubDate>Mon, 13 Apr 2020 16:31:09 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2020/talk-about-fastjson-deserialization-20200413/</guid> </item> <item> <title>攻击Java JMX-RMI</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;RMI的一个重要应用是JMX(Java Management Extentions)，本文介绍JMX的两个攻击面：）&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2020/java-jmx-rmi-20200310/</link> <pubDate>Tue, 10 Mar 2020 20:51:30 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2020/java-jmx-rmi-20200310/</guid> </item> <item> <title>JNDI with LDAP</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;JNDI的SPI层除了RMI外，还可以跟LDAP交互。与RMI类似，LDAP也能同样返回一个Reference给JNDI的Naming Manager，本文将讲述JNDI使用ldap协议的两个攻击面XD&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2020/jndi-with-ldap-20200301/</link> <pubDate>Sun, 01 Mar 2020 19:22:01 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2020/jndi-with-ldap-20200301/</guid> </item> <item> <title>JNDI with RMI</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在现实环境中，遇到RMI Registry的机会很少，而结合反序列化漏洞的JNDI注入则常见了许多。本文将介绍RMI结合JNDI后可以做哪些事情XD&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2020/jndi-with-rmi-20200209/</link> <pubDate>Sun, 09 Feb 2020 21:42:18 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2020/jndi-with-rmi-20200209/</guid> </item> <item> <title>浅谈Java RMI Registry安全问题</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文讲述了Java RMI Registry相关的反序列化问题，主讲Registry，后续补充了Client端和Server端的利用&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2020/rmi-registry-security-problem-20200206/</link> <pubDate>Thu, 06 Feb 2020 15:23:36 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2020/rmi-registry-security-problem-20200206/</guid> </item> <item> <title>Java反序列化利用链挖掘之Shiro反序列化</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在跟了一遍commons-collections系列的payload后，终于可以开始解决一下当时对shiro反序列化模凌两可的认识了。&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2019/study-java-deserialized-shiro-1-2-4-20191110/</link> <pubDate>Sun, 10 Nov 2019 15:32:03 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2019/study-java-deserialized-shiro-1-2-4-20191110/</guid> </item> <item> <title>Java反序列化利用链挖掘之CommonsCollections2,4,8</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;前面几篇文章，分析了CommonsCollections:3.2.1版本以下存在的反序列化链。今天将继续分析CommonsCollections:4.0版本，主要讲述CommonsCollections2，4，8的利用链构造。&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2019/study-java-deserialized-commonscollections4-20191105/</link> <pubDate>Tue, 05 Nov 2019 16:55:51 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2019/study-java-deserialized-commonscollections4-20191105/</guid> </item> <item> <title>Java反序列化利用链挖掘之CommonsCollections5,6,7,9,10</title> <description>&lt;h2&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;本文继续分析CommonsCollections的相关反序列化利用链，这次主要分析CommonsCollections5,6,7，以及我找的一个新利用链，这里暂且将其称为10.&lt;/p&gt;</description><link>https://blog.0kami.cn/blog/2019/study-java-deserialized-commonscollections3-others-20191031/</link> <pubDate>Thu, 31 Oct 2019 19:40:44 +0000</pubDate><source url="https://blog.0kami.cn/feed_rss_created.xml">wh1t3p1g's blog</source><guid isPermaLink="true">https://blog.0kami.cn/blog/2019/study-java-deserialized-commonscollections3-others-20191031/</guid> </item> </channel></rss>